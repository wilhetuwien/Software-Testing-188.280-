// Generated by Selenium IDE
package at.tuwien.swtesting;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterAll;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.WebElement;

import org.openqa.selenium.support.ui.Select;

import at.tuwien.swtesting.pageobjects.BugListMassChangePage;
import at.tuwien.swtesting.pageobjects.BugListPage;
import at.tuwien.swtesting.pageobjects.CreateBugPage;
import at.tuwien.swtesting.pageobjects.HomePage;
import at.tuwien.swtesting.pageobjects.LoginPage;
import at.tuwien.swtesting.pageobjects.ProcessBugPage;
import at.tuwien.swtesting.pageobjects.SearchPage;
import at.tuwien.swtesting.pageobjects.ShowBugPage;
import io.github.bonigarcia.wdm.WebDriverManager;
import io.github.bonigarcia.wdm.config.DriverManagerType;

import org.openqa.selenium.JavascriptExecutor;
import java.util.*;

import javax.swing.text.StyledEditorKit.BoldAction;

public class CreateBugTest {
  static JavascriptExecutor js;

	private static final String BASE_URL = "http://192.168.56.101/";
	private static final String USERNAME = "admin@example.com";
	private static final String PASSWORD = "Bugzilla1";
	
	private static final DriverManagerType DRIVER_TYPE = DriverManagerType.CHROME;

	private static WebDriver driver;
	private static HomePage homePage;
	private static LoginPage loginPage;
	private static CreateBugPage createBugPage;
	private static ShowBugPage showBugPage;
  private static SearchPage searchPage;
  private static BugListPage bugListPage;
  private static BugListMassChangePage bugListMassChangePage;
  private static ProcessBugPage processBugPage;



  private String bugStatusResolved = "RESOLVED";
  private String resolutionStatusFixed = "FIXED";

	@BeforeAll
	public static void setUpBeforeAll() {
		WebDriverManager.getInstance(DRIVER_TYPE).setup(); 	
		driver = new ChromeDriver();

		homePage = HomePage.navigateTo(driver, BASE_URL);
		loginPage = homePage.gotoLoginPage();
		homePage = loginPage.login(USERNAME, PASSWORD);
	}

	@AfterAll
	public static void tearDownAfterAll() {
		homePage = homePage.logout();

		driver.close();
		driver.quit();
	}
	
	@BeforeEach
	public void setUp() {
		homePage = HomePage.navigateTo(driver, BASE_URL);
	}
  
  @Test
  public void createBugPageObjectTest() {
    // Test name: CreateBugTest
    /*
     * Creates a report and then sets it as resolved upon cleanup
     */
    String summaryText = "TestCreateBug";
    String descriptionText = "A simple test for creating a bugreport";
    // 2 | click | linkText=New | 
    // driver.findElement(By.linkText("New")).click();
    createBugPage = homePage.gotoCreateBugPage();
    // 3 | click | id=short_desc | 
    // driver.findElement(By.id("short_desc")).click();
    // // 4 | type | id=short_desc | TestCreateBug
    // driver.findElement(By.id("short_desc")).sendKeys("TestCreateBug");
    createBugPage.setSummary(summaryText);
    // 5 | click | id=comment | 
    // driver.findElement(By.id("comment")).click();
    // // 6 | type | id=comment | A simple test for creating a bugreport
    // driver.findElement(By.id("comment")).sendKeys("A simple test for creating a bugreport");
    createBugPage.setDescription(descriptionText);
    // 7 | click | id=commit | 
    // driver.findElement(By.id("commit")).click();
    showBugPage = createBugPage.submit();

    // 8 | assertElementPresent | xpath=//*[@id="bugzilla-body"]/dl/dt[starts-with(text(),'Bug ') and contains(text()[2], " has been successfully created") and string-length(translate(.//a,"0123456789", "0123456789")) > 0] | 
    // Find element confirming successfull creation of bugreport
    // {
    //   List<WebElement> elements = driver.findElements(By.xpath("//*[@id=\"bugzilla-body\"]/dl/dt[starts-with(text(),\'Bug \') and contains(text()[2], \" has been successfully created\") and string-length(translate(.//a,\"0123456789\", \"0123456789\")) > 0]"));
    //   assert(elements.size() > 0);
    // }
    assert(showBugPage.getNumberOfBugCreationElements() > 0);

    // 9 | verifyText | id=comment_text_0 | A simple test for creating a bugreport
    // assertEquals(driver.findElement(By.id("comment_text_0")).getText(), "A simple test for creating a bugreport");
    assertEquals(showBugPage.getFirstComment(), descriptionText);
    // 10 | verifyText | id=short_desc_nonedit_display | TestCreateBug
    // assertEquals(driver.findElement(By.id("short_desc_nonedit_display")).getText(), "TestCreateBug");
    assertEquals(showBugPage.getSummary(), summaryText);
    // 11 | click | css=.bz_bug | 
    // driver.findElement(By.cssSelector(".bz_bug")).click();
    // Start clean up
    // 13 | select | id=bug_status | label=RESOLVED
    // {
    //   WebElement dropdown = driver.findElement(By.id("bug_status"));
    //   dropdown.findElement(By.xpath("//option[. = 'RESOLVED']")).click();
    // }
    showBugPage.setBugStatus(bugStatusResolved);
    // 12 | select | id=resolution | label=FIXED
    // {
    //   WebElement dropdown = driver.findElement(By.id("resolution"));
    //   dropdown.findElement(By.xpath("//option[. = 'FIXED']")).click();
    // }
    showBugPage.setResolution(resolutionStatusFixed);
    // 14 | click | css=table:nth-child(2) > tbody > tr > td | 
    // driver.findElement(By.cssSelector("table:nth-child(2) > tbody > tr > td")).click();
    // 15 | click | id=commit | 
    // driver.findElement(By.id("commit")).click();
    showBugPage.submit();
  }

  @Test
  public void searchPageObjectTest() {
    // Test name: SearchTest
    /*
     * Creates two reports with and searches for open issues with that name. 
     * Upon cleanup it sets all issues found as resolved.
     */
    String summaryText = "searchforbugreport";

    // Step # | name | target | value
    // // 1 | open | / | 
    // driver.get(BASE_URL);
    // 2 | click | linkText=New | 
    // Initialise two bugs to be found
    driver.findElement(By.linkText("New")).click();
    createBugPage = homePage.gotoCreateBugPage();
    // // 3 | click | id=short_desc | 
    // driver.findElement(By.id("short_desc")).click();
    // // 4 | type | id=short_desc | searchforbugreport
    // driver.findElement(By.id("short_desc")).sendKeys("searchforbugreport");
    createBugPage.setSummary(summaryText);
    // // 5 | click | id=commit | 
    // driver.findElement(By.id("commit")).click();
    createBugPage.submit();
    // // 6 | click | linkText=New | 
    // driver.findElement(By.linkText("New")).click();
    createBugPage = homePage.gotoCreateBugPage();
    // // 7 | click | id=short_desc | 
    // driver.findElement(By.id("short_desc")).click();
    // // 8 | type | id=short_desc | searchforbugreport
    // driver.findElement(By.id("short_desc")).sendKeys("searchforbugreport");
    createBugPage.setSummary(summaryText);
    // // 9 | click | id=commit | 
    // driver.findElement(By.id("commit")).click();
    showBugPage = createBugPage.submit();
    // 10 | click | linkText=Search | 
    // driver.findElement(By.linkText("Search")).click();
    searchPage = homePage.gotoSeachPage();
    // // 11 | select | id=bug_status | label=Open
    // {
    //   WebElement dropdown = driver.findElement(By.id("bug_status"));
    //   dropdown.findElement(By.xpath("//option[. = 'Open']")).click();
    // }
    searchPage.setBugStatus("Open");
    // 12 | select | id=product | label=TestProduct
    // {
    //   WebElement dropdown = driver.findElement(By.id("product"));
    //   // Following line was exported by selenium IDE and doesn't work.
    //   // dropdown.findElement(By.xpath("//option[. = 'TestProduct']")).click();

    //   // Following is the workaround because xpath doesn't work.
    //   Select drpDown = new Select(dropdown);
    //   drpDown.selectByVisibleText("TestProduct");
    // }
    searchPage.setProduct("TestProduct");
    //searchPage.setProduct("TestProduct");
    // // 13 | click | id=content | 
    // driver.findElement(By.id("content")).click();
    // // 14 | type | id=content | searchforbugreport
    // driver.findElement(By.id("content")).sendKeys("searchforbugreport");
    searchPage.setSearch("searchforbugreport");
    // 15 | click | id=search | 
    // driver.findElement(By.id("search")).click();
    bugListPage = searchPage.submit();
    // 17 | verifyText | css=.bz_result_count | 2 bugs found.
    // assertEquals(driver.findElement(By.cssSelector(".bz_result_count")).getText(), "2 bugs found."); 
    assertEquals(bugListPage.getResultCount(), "2 bugs found.");
    // 18 | click | id=check_all | 
    // Clean up created bugs
    // 16 | click | id=mass_change | 
    // driver.findElement(By.id("mass_change")).click();
    bugListMassChangePage = bugListPage.gotoMassChange();
    // driver.findElement(By.id("check_all")).click();
    bugListMassChangePage.setCheckAll();
    // // 19 | select | id=bug_status | label=RESOLVED
    // {
    //   WebElement dropdown = driver.findElement(By.id("bug_status"));
    //   // Following line was exported by selenium IDE and doesn't work.
    //   // dropdown.findElement(By.xpath("//option[. = 'RESOLVED']")).click();

    //   // Following is the workaround because xpath doesn't work.
    //   Select drpDown = new Select(dropdown);
    //   drpDown.selectByVisibleText("RESOLVED");
      
    // }
    bugListMassChangePage.setBugStatus("RESOLVED");
    // // 20 | select | id=resolution | label=FIXED
    // {
    //   WebElement dropdown = driver.findElement(By.id("resolution"));
    //   dropdown.findElement(By.xpath("//option[. = 'FIXED']")).click();
    // }
    bugListMassChangePage.setResolution("FIXED");
    // 21 | click | id=commit | 
    // driver.findElement(By.id("commit")).click();
    bugListMassChangePage.submit();
  }


  @Test
  public void changeStatusPageObjectTest() {
    // Test name: ChangeStatusTest
    /*
     * Creates a report, then copies it and resolvs the copy. 
     * Upon cleanup also resolves the original issue
     */
    // Step # | name | target | value
    // 1 | open | / | 
    // driver.get(BASE_URL);
    // 2 | click | linkText=New | 
    // Create original bug
    // driver.findElement(By.linkText("New")).click();
    createBugPage = homePage.gotoCreateBugPage();
    // 3 | click | id=short_desc | 
    // driver.findElement(By.id("short_desc")).click();
    // // 4 | type | id=short_desc | ChangeStatustest
    // driver.findElement(By.id("short_desc")).sendKeys("ChangeStatustest");
    createBugPage.setSummary("ChangeStatustest");
    // 5 | click | id=commit | 
    // driver.findElement(By.id("commit")).click();
    showBugPage = createBugPage.submit();
    // 6 | click | linkText=Clone This Bug | 
    // Clone Bug
    // driver.findElement(By.linkText("Clone This Bug")).click();
    createBugPage = showBugPage.cloneBug();
    // 7 | click | id=commit | 
    // driver.findElement(By.id("commit")).click();
    showBugPage = createBugPage.submit();
    // 9 | select | id=bug_status | label=RESOLVED
    // {
    //   WebElement dropdown = driver.findElement(By.id("bug_status"));
    //   dropdown.findElement(By.xpath("//option[. = 'RESOLVED']")).click();
    // }
    showBugPage.setBugStatus("RESOLVED");
    // 8 | select | id=resolution | label=FIXED
    // {
    //   WebElement dropdown = driver.findElement(By.id("resolution"));
    //   dropdown.findElement(By.xpath("//option[. = 'FIXED']")).click();
    // }
    showBugPage.setResolution("FIXED");
    // 10 | click | id=comment | 
    // driver.findElement(By.id("comment")).click();
    // 11 | type | id=comment | Fixed this bug 
    // driver.findElement(By.id("comment")).sendKeys("Fixed this bug ");
    showBugPage.setComment("Fixed this bug ");
    // 12 | click | id=commit | 
    // driver.findElement(By.id("commit")).click();
    processBugPage = showBugPage.submit();
    // 13 | click | css=#bugzilla-body > dl > dt > a | 
    // driver.findElement(By.cssSelector("#bugzilla-body > dl > dt > a")).click();
    showBugPage = processBugPage.gotoFirstBugInList();
    // 14 | select | id=resolution | label=FIXED
    // {
    //   WebElement dropdown = driver.findElement(By.id("resolution"));
    //   dropdown.findElement(By.xpath("//option[. = 'FIXED']")).click();
    // }
    // showBugPage.setResolution("FIXED");
    // 15 | verifyText | id=static_bug_status | RESOLVED FIXED (edit)
    // assertEquals(driver.findElement(By.id("static_bug_status")).getText(), "RESOLVED FIXED (edit)");
    assertEquals(showBugPage.getStaticBugStatus(), "RESOLVED FIXED (edit)");
    // 16 | verifyText | id=comment_text_1 | Fixed this bug
    // assertEquals(driver.findElement(By.id("comment_text_1")).getText(), "Fixed this bug");
    assertEquals(showBugPage.getSecondComment(), "Fixed this bug");
    // 17 | click | xpath=//*[@id="comment_text_0"]/a | 
    // Clean up original report
    // driver.findElement(By.xpath("//*[@id=\"comment_text_0\"]/a")).click();
    showBugPage = showBugPage.gotoOriginalBug();
    // 19 | select | id=bug_status | label=RESOLVED
    // {
    //   WebElement dropdown = driver.findElement(By.id("bug_status"));
    //   dropdown.findElement(By.xpath("//option[. = 'RESOLVED']")).click();
    // }
    showBugPage.setBugStatus("RESOLVED");
    // 18 | select | id=resolution | label=FIXED
    // {
    //   WebElement dropdown = driver.findElement(By.id("resolution"));
    //   dropdown.findElement(By.xpath("//option[. = 'FIXED']")).click();
    // }
    showBugPage.setResolution("FIXED");
    // 20 | click | id=commit | 
    // driver.findElement(By.id("commit")).click();
    showBugPage.submit();
  }
}
